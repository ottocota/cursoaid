[4mGIT-PUSH[24m(1)                                                                                           Git Manual                                                                                          [4mGIT-PUSH[24m(1)

[1mNAME[0m
       git-push - Update remote refs along with associated objects

[1mSYNOPSIS[0m
       [4mgit[24m [4mpush[24m [--all | --branches | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
                  [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-q | --quiet] [-v | --verbose]
                  [-u | --set-upstream] [-o <string> | --push-option=<string>]
                  [--[no-]signed|--signed=(true|false|if-asked)]
                  [--force-with-lease[=<refname>[:<expect>]] [--force-if-includes]]
                  [--no-verify] [<repository> [<refspec>...]]

[1mDESCRIPTION[0m
       Updates remote refs using local refs, while sending objects necessary to complete the given refs.

       You can make interesting things happen to a repository every time you push into it, by setting up [4mhooks[24m there. See documentation for [1mgit-receive-pack[22m(1).

       When the command line does not specify where to push with the [1m<repository> [22margument, [1mbranch.*.remote [22mconfiguration for the current branch is consulted to determine where to push. If the configuration is
       missing, it defaults to [4morigin[24m.

       When the command line does not specify what to push with [1m<refspec>... [22marguments or [1m--all[22m, [1m--mirror[22m, [1m--tags [22moptions, the command finds the default [1m<refspec> [22mby consulting [1mremote.*.push [22mconfiguration, and if
       it is not found, honors [1mpush.default [22mconfiguration to decide what to push (See [1mgit-config[22m(1) for the meaning of [1mpush.default[22m).

       When neither the command-line nor the configuration specifies what to push, the default behavior is used, which corresponds to the [1msimple [22mvalue for [1mpush.default[22m: the current branch is pushed to the
       corresponding upstream branch, but as a safety measure, the push is aborted if the upstream branch does not have the same name as the local one.

[1mOPTIONS[0m
       <repository>
           The "remote" repository that is the destination of a push operation. This parameter can be either a URL (see the section GIT URLS below) or the name of a remote (see the section REMOTES below).

       <refspec>...
           Specify what destination ref to update with what source object. The format of a <refspec> parameter is an optional plus [1m+[22m, followed by the source object <src>, followed by a colon [1m:[22m, followed by the
           destination ref <dst>.

           The <src> is often the name of the branch you would want to push, but it can be any arbitrary "SHA-1 expression", such as [1mmaster~4 [22mor [1mHEAD [22m(see [1mgitrevisions[22m(7)).

           The <dst> tells which ref on the remote side is updated with this push. Arbitrary expressions cannot be used here, an actual ref must be named. If [1mgit push [<repository>] [22mwithout any [1m<refspec> [22margument
           is set to update some ref at the destination with [1m<src> [22mwith [1mremote.<repository>.push [22mconfiguration variable, [1m:<dst> [22mpart can be omittedâ€”such a push will update a ref that [1m<src> [22mnormally updates without
           any [1m<refspec> [22mon the command line. Otherwise, missing [1m:<dst> [22mmeans to update the same ref as the [1m<src>[22m.

           If <dst> doesnâ€™t start with [1mrefs/ [22m(e.g.  [1mrefs/heads/master[22m) we will try to infer where in [1mrefs/* [22mon the destination <repository> it belongs based on the type of <src> being pushed and whether <dst> is
           ambiguous.

           â€¢   If <dst> unambiguously refers to a ref on the <repository> remote, then push to that ref.

           â€¢   If <src> resolves to a ref starting with refs/heads/ or refs/tags/, then prepend that to <dst>.

           â€¢   Other ambiguity resolutions might be added in the future, but for now any other cases will error out with an error indicating what we tried, and depending on the [1madvice.pushUnqualifiedRefname[0m
               configuration (see [1mgit-config[22m(1)) suggest what refs/ namespace you may have wanted to push to.

           The object referenced by <src> is used to update the <dst> reference on the remote side. Whether this is allowed depends on where in [1mrefs/* [22mthe <dst> reference lives as described in detail below, in
           those sections "update" means any modifications except deletes, which as noted after the next few sections are treated differently.

           The [1mrefs/heads/* [22mnamespace will only accept commit objects, and updates only if they can be fast-forwarded.

           The [1mrefs/tags/* [22mnamespace will accept any kind of object (as commits, trees and blobs can be tagged), and any updates to them will be rejected.

           Itâ€™s possible to push any type of object to any namespace outside of [1mrefs/{tags,heads}/*[22m. In the case of tags and commits, these will be treated as if they were the commits inside [1mrefs/heads/* [22mfor the
           purposes of whether the update is allowed.

           I.e. a fast-forward of commits and tags outside [1mrefs/{tags,heads}/* [22mis allowed, even in cases where whatâ€™s being fast-forwarded is not a commit, but a tag object which happens to point to a new commit
           which is a fast-forward of the commit the last tag (or commit) itâ€™s replacing. Replacing a tag with an entirely different tag is also allowed, if it points to the same commit, as well as pushing a
           peeled tag, i.e. pushing the commit that existing tag object points to, or a new tag object which an existing commit points to.

           Tree and blob objects outside of [1mrefs/{tags,heads}/* [22mwill be treated the same way as if they were inside [1mrefs/tags/*[22m, any update of them will be rejected.

           All of the rules described above about whatâ€™s not allowed as an update can be overridden by adding an the optional leading [1m+ [22mto a refspec (or using [1m--force [22mcommand line option). The only exception to
           this is that no amount of forcing will make the [1mrefs/heads/* [22mnamespace accept a non-commit object. Hooks and configuration can also override or amend these rules, see e.g.  [1mreceive.denyNonFastForwards[0m
           in [1mgit-config[22m(1) and [1mpre-receive [22mand [1mupdate [22min [1mgithooks[22m(5).

           Pushing an empty <src> allows you to delete the <dst> ref from the remote repository. Deletions are always accepted without a leading [1m+ [22min the refspec (or [1m--force[22m), except when forbidden by
           configuration or hooks. See [1mreceive.denyDeletes [22min [1mgit-config[22m(1) and [1mpre-receive [22mand [1mupdate [22min [1mgithooks[22m(5).

           The special refspec [1m: [22m(or [1m+: [22mto allow non-fast-forward updates) directs Git to push "matching" branches: for every branch that exists on the local side, the remote side is updated if a branch of the
           same name already exists on the remote side.

           [1mtag <tag> [22mmeans the same as [1mrefs/tags/<tag>:refs/tags/<tag>[22m.

       --all, --branches
           Push all branches (i.e. refs under [1mrefs/heads/[22m); cannot be used with other <refspec>.

       --prune
           Remove remote branches that donâ€™t have a local counterpart. For example a remote branch [1mtmp [22mwill be removed if a local branch with the same name doesnâ€™t exist any more. This also respects refspecs, e.g.
           [1mgit push --prune remote refs/heads/*:refs/tmp/* [22mwould make sure that remote [1mrefs/tmp/foo [22mwill be removed if [1mrefs/heads/foo [22mdoesnâ€™t exist.

       --mirror
           Instead of naming each ref to push, specifies that all refs under [1mrefs/ [22m(which includes but is not limited to [1mrefs/heads/[22m, [1mrefs/remotes/[22m, and [1mrefs/tags/[22m) be mirrored to the remote repository. Newly
           created local refs will be pushed to the remote end, locally updated refs will be force updated on the remote end, and deleted refs will be removed from the remote end. This is the default if the
           configuration option [1mremote.<remote>.mirror [22mis set.

       -n, --dry-run
           Do everything except actually send the updates.

       --porcelain
           Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given.

       -d, --delete
           All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon.

       --tags
           All refs under [1mrefs/tags [22mare pushed, in addition to refspecs explicitly listed on the command line.

       --follow-tags
           Push all the refs that would be pushed without this option, and also push annotated tags in [1mrefs/tags [22mthat are missing from the remote but are pointing at commit-ish that are reachable from the refs
           being pushed. This can also be specified with configuration variable [1mpush.followTags[22m. For more information, see [1mpush.followTags [22min [1mgit-config[22m(1).

       --[no-]signed, --signed=(true|false|if-asked)
           GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If [1mfalse [22mor [1m--no-signed[22m, no signing will be attempted. If [1mtrue [22mor [1m--signed[22m, the
           push will fail if the server does not support signed pushes. If set to [1mif-asked[22m, sign if and only if the server supports signed pushes. The push will also fail if the actual call to [1mgpg --sign [22mfails.
           See [1mgit-receive-pack[22m(1) for the details on the receiving end.

       --[no-]atomic
           Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.

       -o <option>, --push-option=<option>
           Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple
           [1m--push-option=<option> [22mare given, they are all sent to the other side in the order listed on the command line. When no [1m--push-option=<option> [22mis given from the command line, the values of configuration
           variable [1mpush.pushOption [22mare used instead.

       --receive-pack=<git-receive-pack>, --exec=<git-receive-pack>
           Path to the [4mgit-receive-pack[24m program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.

       --[no-]force-with-lease, --force-with-lease=<refname>, --force-with-lease=<refname>:<expect>
           Usually, "git push" refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.

           This option overrides this restriction if the current value of the remote ref is the expected value. "git push" fails otherwise.

           Imagine that you have to rebase what you have already published. You will have to bypass the "must fast-forward" rule in order to replace the history you originally published with the rebased history.
           If somebody else built on top of your original history while you are rebasing, the tip of the branch at the remote may advance with their commit, and blindly pushing with [1m--force [22mwill lose their work.

           This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no
           other people did anything to the ref. It is like taking a "lease" on the ref without explicitly locking it, and the remote ref is updated only if the "lease" is still valid.

           [1m--force-with-lease [22malone, without specifying the details, will protect all remote refs that are going to be updated by requiring their current value to be the same as the remote-tracking branch we have
           for them.

           [1m--force-with-lease=<refname>[22m, without specifying the expected value, will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the
           remote-tracking branch we have for it.

           [1m--force-with-lease=<refname>:<expect> [22mwill protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the specified value [1m<expect> [22m(which is allowed to
           be different from the remote-tracking branch we have for the refname, or we do not even have to have such a remote-tracking branch when this form is used). If [1m<expect> [22mis the empty string, then the
           named ref must not already exist.

           Note that all forms other than [1m--force-with-lease=<refname>:<expect> [22mthat specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain
           experience with this feature.

           "--no-force-with-lease" will cancel all the previous --force-with-lease on the command line.

           A general note on safety: supplying this option without an expected value, i.e. as [1m--force-with-lease [22mor [1m--force-with-lease=<refname> [22minteracts very badly with anything that implicitly runs [1mgit fetch [22mon
           the remote to be pushed to in the background, e.g.  [1mgit fetch origin [22mon your repository in a cronjob.

           The protection it offers over [1m--force [22mis ensuring that subsequent changes your work wasnâ€™t based on arenâ€™t clobbered, but this is trivially defeated if some background process is updating refs in the
           background. We donâ€™t have anything except the remote tracking info to go by as a heuristic for refs youâ€™re expected to have seen & are willing to clobber.

           If your editor or some other system is running [1mgit fetch [22min the background for you a way to mitigate this is to simply set up another remote:

               git remote add origin-push $(git config remote.origin.url)
               git fetch origin-push

           Now when the background process runs [1mgit fetch origin [22mthe references on [1morigin-push [22mwonâ€™t be updated, and thus commands like:

               git push --force-with-lease origin-push

           Will fail unless you manually run [1mgit fetch origin-push[22m. This method is of course entirely defeated by something that runs [1mgit fetch --all[22m, in that case youâ€™d need to either disable it or do something
           more tedious like:

               git fetch              # update 'master' from remote
               git tag base master    # mark our base point
               git rebase -i master   # rewrite some commits
               git push --force-with-lease=master:base master:master

           I.e. create a [1mbase [22mtag for versions of the upstream code that youâ€™ve seen and are willing to overwrite, then rewrite history, and finally force push changes to [1mmaster [22mif the remote version is still at
           [1mbase[22m, regardless of what your local [1mremotes/origin/master [22mhas been updated to in the background.

           Alternatively, specifying [1m--force-if-includes [22mas an ancillary option along with [1m--force-with-lease[=<refname>] [22m(i.e., without saying what exact commit the ref on the remote side must be pointing at, or
           which refs on the remote side are being protected) at the time of "push" will verify if updates from the remote-tracking refs that may have been implicitly updated in the background are integrated
           locally before allowing a force